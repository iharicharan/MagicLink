{"version":3,"sources":["App.js","serviceWorker.js","index.js","videos/ram.mp3"],"names":["App","className","id","href","src","audio","autoPlay","loop","FacebookShareButton","url","quote","FacebookIcon","size","square","WhatsappShareButton","WhatsappIcon","TwitterShareButton","TwitterIcon","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","setInterval","element","Date","toLocaleTimeString","module","exports"],"mappings":"0UAoCeA,MA/Bf,WACI,OACA,yBAAKC,UAAU,gBACf,gCACA,uBAAGC,GAAG,SACF,wDACA,6BACF,uBAAGC,KAAK,sCAAsCF,UAAU,gBAAe,uBAAGA,UAAU,iBAAb,wBAErE,kBAAC,IAAD,CAAkBG,IAAKC,IAAOC,UAAQ,EAACC,MAAI,IAE3C,uBAAGN,UAAU,kBAAb,YACH,yBAAKA,UAAU,iBACpB,kBAACO,EAAA,EAAD,CAAqBC,IAAI,iCAAiCC,MAAM,6OAA0MT,UAAU,QAC/Q,kBAACU,EAAA,EAAD,CAAcC,KAAM,GAAIC,OAAO,UAEpC,kBAACC,EAAA,EAAD,CAAqBL,IAAI,+QAA4OR,UAAU,QAC/Q,kBAACc,EAAA,EAAD,CAAcH,KAAM,GAAIC,OAAO,UAE/B,kBAACG,EAAA,EAAD,CAAoBP,IAAI,6QAA2OR,UAAU,QAC7Q,kBAACgB,EAAA,EAAD,CAAaL,KAAM,GAAIC,OAAO,WAK9B,wBAAIX,GAAG,aAAP,qOClBMgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAASlB,MACpDgD,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,GAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCrC/BE,GASAoC,aAPA,WACE,IAAMC,EACF,+BAAO,IAAIC,MAAOC,sBAEtBvB,IAASC,OAAOoB,EAASlB,SAASC,eAAe,WAGjC,M,kBCtBlBoB,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.8861086a.chunk.js","sourcesContent":["import React from 'react';\r\nimport{FacebookShareButton,WhatsappShareButton,TwitterShareButton,FacebookIcon,WhatsappIcon,TwitterIcon} from 'react-share'\r\nimport './App.scss'\r\nimport ReactAudioPlayer from 'react-audio-player'; \r\nimport audio from './videos/ram.mp3' \r\nfunction App(){\r\n    return(\r\n    <div className=\"App-Full-box\">\r\n    <center>\r\n    <p id=\"time\"></p>\r\n        <h2>Wish you a Happy Diwali!</h2>\r\n        <div>\r\n      <a href='https://www.twitter.com/iharicharan' className='twitter-icon'><i className='fa fa-twitter'>Follow @HariCharan</i></a>\r\n        </div>\r\n        <ReactAudioPlayer src={audio} autoPlay loop/>\r\n          \r\n        <p className='share-buttons1'>Share On</p> \r\n     <div className='share-buttons'> \r\n<FacebookShareButton url=\"https://diwali-wishes1.web.app\" quote=\"‚ÄúLet This Diwali Burn All Your Bad Times, Celebrate An Eco-Friendly Diwali!‚Äù ‚ÄúLet Us Have A Smoke Free And Breathe Free Diwali.‚Äù ‚ÄúLets Fill Our Homes With Prayers & Light Not With Fumes & Crackers.üëá\" className='icon'>\r\n     <FacebookIcon size={40} square='true'/>\r\n</FacebookShareButton>\r\n<WhatsappShareButton url=\"*‚ÄúLet This Diwali Burn All Your Bad Times, Celebrate An Eco-Friendly Diwali!‚Äù ‚ÄúLet Us Have A Smoke Free And Breathe Free Diwali.‚Äù ‚ÄúLets Fill Our Homes With Prayers & Light Not With Fumes & Crackers.*.üëá https://diwali-wishes1.web.app\" className='icon' >\r\n<WhatsappIcon size={40} square='true'/>\r\n</WhatsappShareButton>\r\n<TwitterShareButton url=\"‚ÄúLet This Diwali Burn All Your Bad Times, Celebrate An Eco-Friendly Diwali!‚Äù ‚ÄúLet Us Have A Smoke Free And Breathe Free Diwali.‚Äù ‚ÄúLets Fill Our Homes With Prayers & Light Not With Fumes & Crackers..üëá https://diwali-wishes1.web.app\"  className='icon'>\r\n<TwitterIcon size={40} square='true'/>\r\n</TwitterShareButton>\r\n\r\n</div>\r\n\r\n<h3 id='flex-grid'>‚ÄúLet This Diwali Burn All Your Bad Times, Celebrate An Eco-Friendly Diwali!‚Äù ‚ÄúLet Us Have A Smoke Free And Breathe Free Diwali.‚Äù ‚ÄúLets Fill Our Homes With Prayers & Light Not With Fumes & Crackers.</h3>\r\n       \r\n</center>\r\n  </div>\r\n  );\r\n}\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n\nfunction time() {\n  const element = (\n      <span>{new Date().toLocaleTimeString()}</span>\n  );\n  ReactDOM.render(element, document.getElementById('time'));\n}\n\nsetInterval(time, 1000);\n","module.exports = __webpack_public_path__ + \"static/media/ram.e4beb366.mp3\";"],"sourceRoot":""}